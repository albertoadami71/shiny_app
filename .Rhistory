modelFit5$penalty
modelFit5[1]
modelFit5[2]
modelFit5[3]
modelFit5[4]
modelFit5[5]
modelFit5[6]
modelFit5[7]
modelFit5[8]
modelFit5[9]
plot.enet(modelFit5)
data(diabetes)
a
diabetes
names(diabetes)
attach(diabetes)
object=enet(x,y,lambda=1)
par(mfrow=c(2,2))
plot(object)
plot(object, xvar="penalty")
attach(concrete)
object=enet(concrete,lambda=1)
names(concrete)
object=enet(names(concrete),lambda=1)
object=enet(Cement,Water,lambda=1)
help.search("enet")
attach(concrete)
object=enet(x,y,lambda=1)
plot(object, xvar="penalty")
detach(diabetes)
object=enet(x,y,lambda=1)
detach(concrete)
attach(concrete)
object=enet(x,y,lambda=1)
names(concrete)
object=enet(concrete[,-9],concrete[,9],lambda=1)
object=enet(Cement,CompressiveStength,lambda=1)
Cement
detach(concrete)
x = concrete[,-9]
x
names(x)
y = concrete[,9]
object=enet(x,y,lambda=1)
y
names(y)
names(x)
y = concrete[,9]
y
dim(y)
object=enet(x,y,lambda=1)
class(x)
x = as.matrix(x)
object=enet(x,y,lambda=1)
plot(object, xvar="penalty")
source("QUIZ0404.R")
help.search("bats")
help.search("bats")
bts = bats(trainin
bts = bats(trainin
bts = bats(tstrain)
library(forecast)
bts = bats(tstrain)
bts
fcast = forecast(bts)
fcast
plot(fcast)
tstrain
tstest = ts(testing$visitsTumblr)
lines(tstest, color = "red")
lines(tstest, col = "red")
bts = bats(tstrain)
plot(bts)
plot(forecast(bts))
forecast(bts)
help.search("forecast")
help.search("forecast")
tstest
forecast(tstest)
fcast = forecast(bts)
plot(forecast(bts))
plot(forecast(bts,h=365))
lines(tstest, col = "red")
a = forecast(bts,h=235)
a
q()
source("QUIZ0405.R")
library(caret)
source("QUIZ0405.R")
set.seed(325)
help.search("e1071")
library(e1071)
svmmodel = svm(CompressiveStrength^., data = training)
svmmodel = svm(CompressiveStrength~., data = training)
svmpred = predict(svmmodel, testing)
svmpred
confusionMatrix(svmpred, testing$CompressiveStrength)
testing$CompressiveStrength
dim(svmpred)
length(svmpred)
svmpred-testing$CompressiveStrength
sum(svmpred-testing$CompressiveStrength)^2
sqrt(sum(svmpred-testing$CompressiveStrength)^2)
help.search("rmse")
sqrt((sum(svmpred-testing$CompressiveStrength)^2)/256)
sqrt(11543.39)
sqrt(11543.39/256)
svmmodel = svm(CompressiveStrength~., data = training)
svmpred = predict(svmmodel, data=testing)
sqrt((sum(svmpred-testing$CompressiveStrength)^2)/256)
length(svm)
length(svmpred)
dim(testing)
svmpred
svmpred = 0
svmpred = predict(svmmodel, testing)
svmpred
length(svmpred)
sqrt((sum(svmpred-testing$CompressiveStrength)^2)/256)
svmpred = predict(svmmodel, newdata = testing)
length(svmpred)
sqrt((sum(svmpred-testing$CompressiveStrength)^2)/256)
svmmodel
2.69258*2.69258
crossprod(svmpred-testing$CompressiveStrength)/length(svmpred)
sqrt(crossprod(svmpred-testing$CompressiveStrength)/length(svmpred))
11543.39/256
help.search("forecast")
source("QUIZ0404.R")
fit = bats(tstrain)
library(forecast)
fit = bats(tstrain)
fit
help.search("bats")
tstest = ts(testing$visitsTumblr)
tstest
test = bats(tstest)
fit
test= ets(testing, model=fit)
test= ets(tstest, model=fit)
tstest
fit = bats(tstrain)
plot(forecast(fit))
plot(forecast(fit, h=100))
fit = ets(tstrain)
fit
plot(forecast(fit, h=100))
fit = ets(tstrain, model="MMM")
fit = bats(tstrain, model="MMM")
help.search("ets")
fit = bats(tstrain, model="NNN")
fit
fit = bats(tstrain, model="ZZZ")
fit
fit = ets(tstrain, model="ZZZ")
fit
test = ets(tstest, model=fit)
plot(test)
test
test$observed
test[1]
test[2]
test[3]
test[4]
test[5]
test[6]
test[7]
test[8]
test[9]
test[10]
test[11]
test[12]
test[9]
fit = bats(tstrain)
forecat(fit, =1)
forecat(fit, h=1)
forecast(fit, h=1)
tstest
testing
forecast(fit, h=1)
forecast(fit, h=10)
forecast(fit, h=235)
a =forecast(fit, h=235)
a[,5]
dim(a)
class(a)
a[1]
a[2]
a[3]
a[4]
a[5]
a[6]
a[7]
a[8]
a[9]
a[10]
a[11]
a[8]
a[9]
a[10]
a[5]
a
a[5]
a[5][[2]]
a[5][1]
a[5][[1]]
a[5][[2]]
a[5,2]
a[[5]]
a[[5]][2]
a[[5]][,2]
zzz = a[[5]][,2]
tstest
passou = zzz - tstest
passou
passou[passou<0]
(235-9)*100/235
q()
source("QUIZ0402.R")
confusionMatrix(combpred,pred04$diagnosis)
confusionMatrix(pred01,pred04$diagnosis)
confusionMatrix(pred02,pred04$diagnosis)
confusionMatrix(pred03,pred04$diagnosis)
q()
dim(matriz)
source("Airbnb.R")
getwd()
list()
list.files()
source("Airbnb.R")
head(matriz)
source("Airbnb.R")
resume
help.search("aggregate")
z = matriz[ ,matriz$action_detail="your_trips"]
z <- matriz[ ,matriz$action_detail="your_trips"]
z <- matriz[ ,matriz$action_detail=="your_trips"]
z <- matriz[matriz$action_detail=="your_trips",]
z
head(z)
sum(z$secs_elapsed)
help.search("na.action")
sum(z$secs_elapsed, na.action = na.omit)
resume<-aggregate(matriz$secs_elapsed, list(acao=matriz$action_detail),sum, na.action = na.omit)
matriz = matriz[matriz$secs_elapsed!=NA,]
z <- matriz[matriz$action_detail=="your_trips",]
sum(z$secs_elapsed)
z[z==NA,]
matriz = matriz[!is.NA(matriz$secs_elapsed),]
help.search("na")
matriz = matriz[!is.na(matriz$secs_elapsed),]
z <- matriz[matriz$action_detail=="your_trips",]
sum(z$secs_elapsed)
head(matriz)
source("Airbnb.R")
source("Airbnb.R")
z = 0
dim(matriz)
resume =
resume = 0
matriz2 = matriz[is.na(matriz$secs_elapsed),]
matriz2
head(matriz2)
matriz2 = matriz[(!is.na(matriz$secs_elapsed)),]
head(matriz2)
resume<-aggregate(matriz2$secs_elapsed, list(acao=matriz2$action_detail),sum)
resume
source("Airbnb.R")
resume$secs_elapsed
resume
head(resume)
resume$x
source("Airbnb.R")
resume
help.search("correlation")
matriz2$view_search_results
head(matriz2)
z1 = matriz2[matriz2$action_detail=="view_search_results", matriz2$secs_elapsed]
z1 = matriz2[matriz2$action_detail=="view_search_results", 6]
z1
z2 = matriz2[matriz2$action_detail=="p3", 6]
cor(z1,z2)
hist(z1)
hist(log(z1))
hist(log(z2))
resume
hist(z2)
z2 = matriz2[matriz2$action_detail=="confirm_email_link", 6]
z2 = matriz2[matriz2$action_detail=="confirm_email_link", 6]
hist(z2)
hist(log(z2))
log(10)
log(2.8182)
log(2.7182)
log(e)
log(exp(1))
exp(1)
z2 = matriz2[matriz2$action_detail=="message_post", 6]
hist(z2)
hist(log(z2))
plot(z2)
plot(z1)
plot(z1[1:100])
points(z2[1:100])
plot(z1[1:100])
points(z2[1:100], col="red")
z3 = matriz2[matriz2$action_detail=="confirm_email_link", 6]
points(z3[1:100], col="yellow")
hist(log(z2))
hist(log(z1))
resume[1:20,]
resume[1:21,]
resume[1:22,]
z3 = matriz2[matriz2$action_detail=="cancellation_policies", 6]
hist(z)
hist(z3)
hist(log(z3))
q()
head(matriz2)
info_detail = matriz2[matriz2$action_detail=="p3", c(1,6)]
head(info_detail)
info_detail = matriz2[matriz2$action_detail==resume[1,1], c(1,6)]
head(info_detail)
names(info_detail) = c("user_id", resume[1,1])
head(info_detail)
head(resume)
resume[1,1]
as.character(resume[1,1])
names(info_detail) = c("user_id", as.character(resume[1,1]))
head(info_detail)
q()
head(info_detail,20)
agregados = aggregate(matriz2$secs_elapsed, list(user_id=matriz2$user_id, action_detail=matriz2$action_detail),sum)
head(agregados,20)
head(agregados,200)
head(agregados,2000)
head(agregados,20000)
head(agregados,20000:40000)
agregados[20000:40000]
agregados[20000:40000,]
agregados[200000:400000,]
info_detail = agregados[agregados$action_detail==resume[1,1], c(1,6)]
head(agregados)
info_detail = agregados[agregados$action_detail==resume[1,1], c(1,3)]
info_detail
hist(info_detail$x)
hist(log(info_detail$x))
info_detail = agregados[agregados$action_detail==resume[4,1], c(1,3)]
head(info_detail)
info_detail
resume[1,4]
resume[4,1]
sum(info_detail$x)
head(resume)
info_detail = agregados[agregados$action_detail==resume[2,1], c(1,3)]
sum(info_detail$x)
info_detail
dim(info_detail)
info_detail = agregados[agregados$action_detail==resume[1,1], c(1,3)]
dim(info_detail)
info_detail = agregados[agregados$action_detail==resume[4,1], c(1,3)]
dim(info_detail)
info_detail = agregados[agregados$action_detail==resume[8,1], c(1,3)]
dim(info_detail)
info_detail = agregados[agregados$action_detail==resume[10,1], c(1,3)]
dim(info_detail)
info_detail = agregados[agregados$action_detail==resume[20,1], c(1,3)]
dim(info_detail)
matriz2[matriz$user_id="syiid9h31c
matriz2[matriz$user_id="syiid9h31c", ]
matriz2[matriz$user_id=="syiid9h31c", ]
head(info_detail)
tail(info_detail)
train_users = read.csv("PREDICTION Airbnb\\train_users.csv", header = TRUE, sep=",")
head(train_users)
names(info_detail)
names(info_detail)=c("id","x")
names(info_detail)
merge(train_users, info_detail, by="id")
head(train_users)
aux= merge(train_users, info_detail, by="id")
head(aux)
head(aux,2000)
head(aux,20)
dim(aux)
dim(train_users)
dim(info_detail)
info_detail = agregados[agregados$action_detail==resume[1,1], c(1,3)]
names(info_detail)=c("id","x")
aux= merge(train_users, info_detail, by="id")
dim(aux)
dim(info_detail)
help.search("merge")
aux= merge(train_users, info_detail, by="id", all.x=TRUE)
dim(aux)
head(aux,20)
info_detail = agregados[agregados$action_detail==resume[2,1], c(1,3)]
names(info_detail)=c("id","x")
aux= merge(aux, info_detail, by="id", all.x=TRUE)
head(aux,20)
tail(aux,20)
q()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
utils:::menuInstallPkgs()
update.packages(ask='graphics',checkBuilt=TRUE)
setRepositories()
chooseCRANmirror()
utils:::menuInstallPkgs()
utils:::menuInstallPkgs()
chooseCRANmirror()
utils:::menuInstallPkgs()
utils:::menuInstallPkgs()
utils:::menuInstallPkgs()
utils:::menuInstallPkgs()
utils:::menuInstallPkgs()
require(devtools)
utils:::menuInstallPkgs()
require(devtools)
install_github('rCharts','ramnathv')
library(rCharts)
q()
library(manipulate)
car
cars
manipulate(myPlot(s), s = slider(0,2, step=0.1))
myPlot<- function(s) {
plot(cars$dist - mean(car$dist), cars$speed - mean(cars$speed))
abline(0,s)
}
manipulate(myPlot(s), s = slider(0,2, step=0.1))
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
manipulate(myPlot(s), s = slider(0,2, step=0.1))
myPlot<- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0,s)
}
manipulate(myPlot(s), s = slider(0,2, step=0.1))
utils:::menuInstallPkgs()
setRepositories()
chooseCRANmirror()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
q()
utils:::menuInstallPkgs()
help.start()
help.search("seq")
x = seq(from=1960, to=2015, by=1)
x
help.search("points")
x1 = (1:10)
x1
x2 = (5:15)
max(x1)
max(max(x1),max(x2))
extrai = dados[ (dados$Name=="Brazil")&(dados$Series.Name== dados$Series.Name[2]), 5:dim(dados)[2]]
extrai = as.numeric(extrai)
ts1<-ts(extrai)
extrai = dados[ (dados$Name=="United States")&(dados$Series.Name== dados$Series.Name[2]), 5:dim(dados)[2]]
extrai = as.numeric(extrai)
ts2<-ts(extrai)
ymin = min(min(ts1),min(ts2))
ymax = max(max(ts1),max(ts2))
ymin
ymax
ts1
extrai
dados
dados<-read.csv("Data_Extract_From_World_Development_Indicators_Data.csv", na.strings=c(".."))
names(dados)[1]="Name"
extrai = dados[ (dados$Name=="Brazil")&(dados$Series.Name== dados$Series.Name[2]), 5:dim(dados)[2]]
extrai = as.numeric(extrai)
ts1<-ts(extrai)
extrai = dados[ (dados$Name=="United States")&(dados$Series.Name== dados$Series.Name[2]), 5:dim(dados)[2]]
extrai = as.numeric(extrai)
ts2<-ts(extrai)
ymin = min(min(ts1),min(ts2))
ymax = max(max(ts1),max(ts2))
extrai
ymin
ts1
min(ts1)
min(ts1[!is.na(ts1)]
)
library(forecast)
help.search("ets")
q()
---
help.search("plot")
q()
help.search("plot")
q()
q()
help.search("mtext")
q()
getwd()
setwd("D:/Users/07244256833/Documents/CURSO 09")
library(shiny)
runApp()
runApp()
runApp()
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='albertoadami71',
token='BD3D18047E8D19D9C2E7CDAAF3587CAF',
secret='<SECRET>')
shinyapps::setAccountInfo(name='albertoadami71',
token='BD3D18047E8D19D9C2E7CDAAF3587CAF',
secret='<SECRET>')
runApp()
getwd()
setwd("D:/Users/07244256833/Documents/FORECASTGDP")
runApp()
